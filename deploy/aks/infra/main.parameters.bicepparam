using './main.bicep'

param environmentName = readEnvironmentVariable('AZURE_ENV_NAME')
param resourceGroupName = readEnvironmentVariable('AZURE_RESOURCE_GROUP')
param location = readEnvironmentVariable('AZURE_LOCATION')
param kubernetesVersion = readEnvironmentVariable('AZURE_KUBERNETES_VERSION', '1.33')
param principalId = readEnvironmentVariable('AZURE_PRINCIPAL_ID')
param principalType = readEnvironmentVariable('AZURE_PRINCIPAL_TYPE', 'User')
param openAiServiceName = readEnvironmentVariable('AZURE_OPENAI_SERVICE')
param openAiResourceGroupName = readEnvironmentVariable('AZURE_OPENAI_RESOURCE_GROUP')
param openAiResourceGroupLocation = readEnvironmentVariable('AZURE_OPENAI_RESOURCE_GROUP_LOCATION')
param customOpenAiResourceGroupLocation = readEnvironmentVariable('AZURE_OPENAI_SERVICE_LOCATION')
param openAiSkuName = 'S0'
param documentIntelligenceServiceName = readEnvironmentVariable('AZURE_DOCUMENT_INTELLIGENCE_SERVICE')
param documentIntelligenceResourceGroupName = readEnvironmentVariable('AZURE_DOCUMENT_INTELLIGENCE_RESOURCE_GROUP')
param documentIntelligenceSkuName = 'S0'
param searchIndexName = readEnvironmentVariable('AZURE_SEARCH_INDEX', 'gptkbindex')
param searchServiceName = readEnvironmentVariable('AZURE_SEARCH_SERVICE')
param searchServiceResourceGroupName = readEnvironmentVariable('AZURE_SEARCH_SERVICE_RESOURCE_GROUP')
param searchServiceLocation = readEnvironmentVariable('AZURE_SEARCH_SERVICE_LOCATION')
param searchServiceSkuName = readEnvironmentVariable('AZURE_SEARCH_SERVICE_SKU', 'standard')
param searchQueryLanguage = readEnvironmentVariable('AZURE_SEARCH_QUERY_LANGUAGE', 'en-us')
param searchQuerySpeller = readEnvironmentVariable('AZURE_SEARCH_QUERY_SPELLER', 'lexicon')
param storageAccountName = readEnvironmentVariable('AZURE_STORAGE_ACCOUNT')
param storageResourceGroupName = readEnvironmentVariable('AZURE_STORAGE_RESOURCE_GROUP')
param storageSkuName = readEnvironmentVariable('AZURE_STORAGE_SKU', 'Standard_LRS')
param chatGptModelName = readEnvironmentVariable('AZURE_OPENAI_CHATGPT_MODEL', 'gpt-4o-mini')
param chatGptModelVersion = readEnvironmentVariable('AZURE_OPENAI_CHATGPT_VERSION', '2024-07-18')
param chatGptDeploymentName = readEnvironmentVariable('AZURE_OPENAI_CHATGPT_DEPLOYMENT', 'gpt-4o-mini')
param chatGptDeploymentCapacity = int(readEnvironmentVariable('AZURE_OPENAI_CHATGPT_DEPLOYMENT_CAPACITY', '80'))
param chatGptDeploymentSkuName = readEnvironmentVariable('AZURE_OPENAI_CHATGPT_DEPLOYMENT_SKU_NAME', 'Standard')
param embeddingModelName = readEnvironmentVariable('AZURE_OPENAI_EMB_MODEL', 'text-embedding-3-large')
param embeddingModelVersion = readEnvironmentVariable('AZURE_OPENAI_EMB_MODEL_VERSION', '1')
param embeddingDeploymentName = readEnvironmentVariable('AZURE_OPENAI_EMB_DEPLOYMENT', 'text-embedding-3-large')
param embeddingDeploymentSkuName = readEnvironmentVariable('AZURE_OPENAI_EMB_DEPLOYMENT_SKU', 'GlobalStandard')
param embeddingDeploymentCapacity = int(readEnvironmentVariable('AZURE_OPENAI_EMB_DEPLOYMENT_CAPACITY', '80'))
param embeddingDimensions = int(readEnvironmentVariable('AZURE_OPENAI_EMB_DIMENSIONS', '3072'))
param openAiHost = readEnvironmentVariable('OPENAI_HOST', 'azure')
param openAiApiKey = readEnvironmentVariable('OPENAI_API_KEY')
param openAiApiOrganization = readEnvironmentVariable('OPENAI_ORGANIZATION')
param useApplicationInsights = bool(readEnvironmentVariable('AZURE_USE_APPLICATION_INSIGHTS', 'true'))
param useChatHistoryBrowser = bool(readEnvironmentVariable('USE_CHAT_HISTORY_BROWSER', 'false'))
param useChatHistoryCosmos = bool(readEnvironmentVariable('USE_CHAT_HISTORY_COSMOS', 'false'))
param enableGlobalDocumentAccess = bool(readEnvironmentVariable('AZURE_ENABLE_GLOBAL_DOCUMENT_ACCESS', 'true'))
param cosmosDbSkuName = readEnvironmentVariable('AZURE_COSMOSDB_SKU', 'serverless')
param cosmodDbResourceGroupName = readEnvironmentVariable('AZURE_COSMOSDB_RESOURCE_GROUP')
param cosmosDbLocation = readEnvironmentVariable('AZURE_COSMOSDB_LOCATION')
param cosmosDbAccountName = readEnvironmentVariable('AZURE_COSMOSDB_ACCOUNT')
param cosmosDbThroughput = int(readEnvironmentVariable('AZURE_COSMOSDB_THROUGHPUT'))
param useAuthentication = bool(readEnvironmentVariable('AZURE_USE_AUTHENTICATION', 'false'))
param authTenantId = readEnvironmentVariable('AZURE_AUTH_TENANT_ID')
param serverAppId = readEnvironmentVariable('AZURE_SERVER_APP_ID')
param clientAppId = readEnvironmentVariable('AZURE_CLIENT_APP_ID')
param useServiceBusIndexing = bool(readEnvironmentVariable('USE_SERVICEBUS_INDEXING', 'true'))
