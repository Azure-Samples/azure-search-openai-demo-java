package com.microsoft.openai.samples.rag.approaches;

import com.azure.ai.openai.models.CompletionsOptions;
import com.azure.core.util.Context;
import com.azure.search.documents.SearchDocument;
import com.azure.search.documents.models.*;
import com.azure.search.documents.util.SearchPagedIterable;
import com.microsoft.openai.samples.rag.proxy.CognitiveSearchProxy;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;

public interface RAGApproach<I, O> {

    O run(I questionOrConversation, RAGOptions options);

    CognitiveSearchProxy getCognitiveSearchProxy();

    default CompletionsOptions fillCommonCompletionsOptions(CompletionsOptions completionsOptions) {
        completionsOptions.setMaxTokens(1024);
        completionsOptions.setTemperature(0.3);
        completionsOptions.setLogitBias(new HashMap<>());
        completionsOptions.setEcho(false);
        completionsOptions.setN(1);
        completionsOptions.setStream(false);
        completionsOptions.setUser("search-openai-demo-java");
        completionsOptions.setPresencePenalty(0.0);
        completionsOptions.setFrequencyPenalty(0.0);
        completionsOptions.setBestOf(1);
        return completionsOptions;
    }

    default SearchOptions buildSearchOptions(RAGOptions options) {
        var searchOptions = new SearchOptions();

        Optional.ofNullable(options.getTop()).ifPresentOrElse(
            searchOptions::setTop,
            () -> searchOptions.setTop(3));
        Optional.ofNullable(options.getExcludeCategory())
            .ifPresentOrElse(
                value -> searchOptions.setFilter("category ne '%s'".formatted(value.replace("'", "''"))),
                () -> searchOptions.setFilter(null));

        Optional.ofNullable(options.isSemanticRanker()).ifPresent(isSemanticRanker -> {
            if (isSemanticRanker) {
                searchOptions.setQueryType(QueryType.SEMANTIC);
                searchOptions.setQueryLanguage(QueryLanguage.EN_US);
                searchOptions.setSpeller(QuerySpellerType.LEXICON);
                searchOptions.setSemanticConfigurationName("default");
                searchOptions.setQueryCaption(QueryCaptionType.EXTRACTIVE);
                searchOptions.setQueryCaptionHighlightEnabled(false);
            }
        });

        return searchOptions;
    }

    default SearchPagedIterable getCognitiveSearchResults(String question, RAGOptions options) {
        return getCognitiveSearchProxy().search(question, buildSearchOptions(options), Context.NONE);
    }

    default List<ContentSource> buildSourcesFromSearchResults(RAGOptions options, SearchPagedIterable searchResults) {
        List<ContentSource> sources = new ArrayList<>();

        searchResults.iterator().forEachRemaining(result ->
        {
            var searchDocument = result.getDocument(SearchDocument.class);

            /*
             If captions is enabled the content source is taken from the captions generated by the semantic ranker.
             Captions are appended sequentially and separated by a dot.
             */
            if(options.isSemanticCaptions()) {
                StringBuilder sourcesContentBuffer = new StringBuilder();

                result.getCaptions().forEach(caption -> sourcesContentBuffer.append(caption.getText()).append("."));

                sources.add(new ContentSource((String)searchDocument.get("sourcepage"), sourcesContentBuffer.toString()));
            } else {
                //If captions is disabled the content source is taken from the cognitive search index field "content"
                sources.add(new ContentSource((String) searchDocument.get("sourcepage"), (String) searchDocument.get("content")));
            }
        });

        return sources;
    }

}
